contracts
payment(id:1, contractID:1, from:"Alice", to:"Bob", amount:100, time:0).
contract.PaymentRecord{}?
----
application/datalog
contract.PaymentRecord{amount: 100, contractID: "1", from: "Alice", id: "1", time: 0, to: "Bob"}.

contracts
contract(
  id:1,
  contract:and(
    pay(from:"Alice", to:"Bob", amount:100),
    delay(
      duration:30,
      contract:pay(from:"Bob", to:"Alice", amount:110)
    )
  )
).
contract.node.Payment{}?
----
application/datalog
contract.node.Payment{amount: 100, from: "Alice", id: 44, to: "Bob"}.
contract.node.Payment{amount: 110, from: "Bob", id: 160, to: "Alice"}.

contracts
contract(
  id:1,
  contract:and(
    pay(from:"Alice", to:"Bob", amount:100),
    delay(
      duration:30,
      contract:pay(from:"Bob", to:"Alice", amount:110)
    )
  )
).
contract.node.And{}?
----
application/datalog
contract.node.And{id: 32}.

contracts
contract(
  id:1,
  contract:and(
    pay(from:"Alice", to:"Bob", amount:100),
    delay(
      duration:30,
      contract:pay(from:"Bob", to:"Alice", amount:110)
    )
  )
).
contract.node.Delay{}?
----
application/datalog
contract.node.Delay{duration: 30, id: 107}.

contracts
contract(
  id:1,
  contract:and(
    pay(from:"Alice", to:"Bob", amount:100),
    delay(
      duration:30,
      contract:pay(from:"Bob", to:"Alice", amount:110)
    )
  )
).
contract.tree.node{}?
----
application/datalog
contract.tree.node{display: and{}, id: 32}.
contract.tree.node{display: delay{duration: 30}, id: 107}.
contract.tree.node{display: payment{amount: 100, from: "Alice", to: "Bob"}, id: 44}.
contract.tree.node{display: payment{amount: 110, from: "Bob", to: "Alice"}, id: 160}.

contracts
contract(
  id:1,
  contract:and(
    pay(from:"Alice", to:"Bob", amount:100),
    delay(
      duration:30,
      contract:pay(from:"Bob", to:"Alice", amount:110)
    )
  )
).
contract.root{}?
----
application/datalog
contract.root{callID: 32, contractID: 2}.

contracts
contract(
  id:1,
  contract:and(
    pay(from:"Alice", to:"Bob", amount:100),
    delay(
      duration:30,
      contract:pay(from:"Bob", to:"Alice", amount:110)
    )
  )
).
contract.parent{}?
----
application/datalog
contract.parent{child: 44, parent: 32}.
contract.parent{child: 160, parent: 107}.
contract.parent{child: 107, parent: 32}.
