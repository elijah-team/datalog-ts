contracts
payment(id:1, contractID:1, from:"Alice", to:"Bob", amount:100, time:0).
contract.PaymentRecord{}?
----
application/datalog
contract.PaymentRecord{amount: 100, contractID: "1", from: "Alice", id: "1", time: 0, to: "Bob"}.

contracts
contract(
  id:1,
  contract:and(
    pay(from:"Alice", to:"Bob", amount:100),
    delay(
      duration:30,
      contract:pay(from:"Bob", to:"Alice", amount:110)
    )
  )
).
contract.node.Payment{}?
----
application/datalog
contract.node.Payment{amount: 100, from: "Alice", id: 44, to: "Bob"}.
contract.node.Payment{amount: 110, from: "Bob", id: 160, to: "Alice"}.

contracts
contract(
  id:1,
  contract:and(
    pay(from:"Alice", to:"Bob", amount:100),
    delay(
      duration:30,
      contract:pay(from:"Bob", to:"Alice", amount:110)
    )
  )
).
contract.node.And{}?
----
application/datalog
contract.node.And{id: 32}.

contracts
contract(
  id:1,
  contract:and(
    pay(from:"Alice", to:"Bob", amount:100),
    delay(
      duration:30,
      contract:pay(from:"Bob", to:"Alice", amount:110)
    )
  )
).
contract.node.Delay{}?
----
application/datalog
contract.node.Delay{duration: 30, id: 107}.

contracts
contract(
  id:1,
  contract:and(
    pay(from:"Alice", to:"Bob", amount:100),
    delay(
      duration:30,
      contract:pay(from:"Bob", to:"Alice", amount:110)
    )
  )
).
contract.tree.nodeAndParent{}?
----
application/datalog
contract.tree.nodeAndParent{display: contract{id: 1}, id: 1, parentID: "root"}.
contract.tree.nodeAndParent{display: and{}, id: 32, parentID: 1}.
contract.tree.nodeAndParent{display: delay{duration: 30}, id: 107, parentID: 32}.
contract.tree.nodeAndParent{display: payment{amount: 100, from: "Alice", to: "Bob"}, id: 44, parentID: 32}.
contract.tree.nodeAndParent{display: payment{amount: 110, from: "Bob", to: "Alice"}, id: 160, parentID: 107}.
contract.tree.nodeAndParent{display: root{}, id: "root", parentID: -1}.
