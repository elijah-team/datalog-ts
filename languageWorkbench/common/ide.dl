# === scope / reference graph ===

# TODO: decide on defnSpan vs defnSpan

scope.Item{
  scopeID: I,
  defnScopeID: DS,
  name: N,
  defnSpan: S,
  kind: K,
  type: T
} :-
  scope.defnHere{
    scopeID: I, defnScopeID: DS, name: N, defnSpan: S, kind: K, type: T
  } |
  scope.defnParent{
    scopeID: I, defnScopeID: DS, name: N, defnSpan: S, kind: K, type: T
  }.
scope.defnHere{scopeID: I, defnScopeID: I, name: N, defnSpan: S, kind: K, type: T} :-
  scope.Defn{scopeID: I, name: N, span: S, kind: K, type: T}.
scope.defnParent{scopeID: I, defnScopeID: DS, name: N, defnSpan: S, kind: K, type: T} :-
  scope.Parent{childID: I, parentID: P} &
  scope.Item{scopeID: P, defnScopeID: DS, name: N, defnSpan: S, kind: K, type: T}.

scope.Usage{
  name: N,
  defnSpan: DL,
  usageSpan: UL,
  definitionScopeID: DS,
  usageScopeID: US,
  kind: K
} :-
  scope.Item{scopeID: US, defnSpan: DL, name: N, defnScopeID: DS, kind: K} &
  scope.Var{scopeID: US, span: UL, name: N, kind: K}.

# === Rename ===

ide.RenameSpan{span: S} :-
  ide.UsageAndDefn{span: S} &
  S != "builtin".

# === Jump to Definition ===

ide.DefnForCursor{defnLoc: DL} :-
  ide.Cursor{idx: CIdx} &
  ide.DefnAtPos{idx: CIdx, defnSpan: DL}.

ide.DefnAtPos{idx: CIdx, defnSpan: DS} :-
  scope.Usage{defnSpan: DS, usageSpan: span{from: FIdx, to: TIdx}} &
  FIdx <= CIdx & CIdx <= TIdx.

ide.UsageForCursor{usageSpan: US} :-
  ide.Cursor{idx: CIdx} &
  ide.UsageAtPos{idx: CIdx, usageSpan: US}.

ide.UsageAtPos{idx: CIdx, usageSpan: US} :-
  scope.Usage{defnSpan: span{from: FIdx, to: TIdx}, usageSpan: US} &
  FIdx <= CIdx & CIdx <= TIdx.

# === Suggestions ===

ide.Suggestion{id: I, name: N, span: S, type: T} :-
  scope.Placeholder{scopeID: I, span: S, kind: K} &
  scope.Item{scopeID: I, name: N, kind: K, type: T}.

ide.CurrentPlaceholder{id: I, span: span{from: FIdx, to: TIdx}} :-
  scope.Placeholder{scopeID: I, span: span{from: FIdx, to: TIdx}} &
  ide.Cursor{idx: CIdx} &
  FIdx <= CIdx & CIdx <= TIdx.

ide.CurrentSuggestion{id: I, name: N, span: S, type: T} :-
  ide.CurrentPlaceholder{id: I} &
  ide.Suggestion{id: I, name: N, span: S, type: T}.

ide.CurrentProblem{desc: D, span: span{from: F, to: T}} :-
  tc.Problem{desc: D, span: span{from: F, to: T}} &
  ide.Cursor{idx: CIdx} &
  F <= CIdx & CIdx <= T.

# === Highlight ===

ide.CurrentVar{scopeID: UsageScope, name: N, span: span{from: F, to: T}} :-
  scope.Var{scopeID: UsageScope, name: N, span: span{from: F, to: T}} &
  ide.Cursor{idx: CIdx} &
  F <= CIdx & CIdx <= T.

ide.CurrentDefnOrDefnOfCurrentVar{span: S} :-
  ide.CurrentDefn{span: S} |
  ide.DefnOfCurrentVar{span: S}.

ide.CurrentDefn{scopeID: DefnScope, name: N, span: span{from: F, to: T}} :-
  scope.Defn{scopeID: DefnScope, name: N, span: span{from: F, to: T}} &
  ide.Cursor{idx: CIdx} &
  F <= CIdx & CIdx <= T.

ide.DefnOfCurrentVar{span: S} :-
  ide.CurrentVar{scopeID: UsageScope, name: N} &
  scope.Item{scopeID: UsageScope, name: N, defnSpan: S}.

ide.CurrentVarOrUsageOfCurrentDefn{span: S} :-
  ide.instanceOfCurrentVar{span: S} |
  ide.usageOfCurrentDefn{span: S}.

ide.instanceOfCurrentVar{span: S} :-
  ide.CurrentVar{scopeID: CurrentVarScope, name: N, span: CVS} &
  scope.Item{scopeID: CurrentVarScope, defnScopeID: DefnScope, name: N} &
  scope.Item{scopeID: OtherVarScope, defnScopeID: DefnScope, name: N} &
  scope.Var{scopeID: OtherVarScope, name: N, span: S}.
ide.usageOfCurrentDefn{span: S} :-
  ide.CurrentDefn{scopeID: DefnScope, name: N} &
  scope.Item{scopeID: UsageScope, defnScopeID: DefnScope, name: N} &
  scope.Var{scopeID: UsageScope, name: N, span: S}.

# just for testing
ide.UsageAndDefn{type: T, span: S, highlight: H} :-
  ide.CurrentDefnOrDefnOfCurrentVar{type: T, span: S, highlight: H} |
  ide.CurrentVarOrUsageOfCurrentDefn{type: T, span: S, highlight: H}.
