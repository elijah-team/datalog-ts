main :- value.
value :- (object | array | int | string | null).
int :- [[0-9], repSep([0-9], "")].
object :- ["{", repSep(keyValue, ","), "}"].
keyValue :- [string, ":", value].
array :- ["[", repSep(value, ","), "]"].
null :- "null".
string :- ["\"", repSep(stringChar, ""), "\""].
stringChar :- (^'"' | ['\\', '"']).
----
text/plain
import {textForSpan, childByName, childrenByName} from "./ruleTree";
type JsonArray = {
  array: Value[];
};
type JsonInt = {
};
type JsonKeyValue = {
  keyValue: String;
  keyValue: Value;
};
type JsonMain = {
  main: Value;
};
type JsonNull = {
};
type JsonObject = {
  object: KeyValue[];
};
type JsonString = {
  string: StringChar[];
};
type JsonStringChar = {
};
type JsonValue = {
  value: Object;
  value: Array;
  value: Int;
  value: String;
  value: Null;
};
function extractArray(input, node) {
  return {
    __rule__: "array",
    __text__: textForSpan(input, node.span),
    value: childrenByName(node, "value").map(child => extractValue(input, child))
  };
}
function extractInt(input, node) {
  return {
    __rule__: "int",
    __text__: textForSpan(input, node.span)
  };
}
function extractKeyValue(input, node) {
  return {
    __rule__: "keyValue",
    __text__: textForSpan(input, node.span),
    string: extractString(input, childByName(node, "string")),
    value: extractValue(input, childByName(node, "value"))
  };
}
function extractMain(input, node) {
  return {
    __rule__: "main",
    __text__: textForSpan(input, node.span),
    value: extractValue(input, childByName(node, "value"))
  };
}
function extractNull(input, node) {
  return {
    __rule__: "null",
    __text__: textForSpan(input, node.span)
  };
}
function extractObject(input, node) {
  return {
    __rule__: "object",
    __text__: textForSpan(input, node.span),
    keyValue: childrenByName(node, "keyValue").map(child => extractKeyValue(input, child))
  };
}
function extractString(input, node) {
  return {
    __rule__: "string",
    __text__: textForSpan(input, node.span),
    stringChar: childrenByName(node, "stringChar").map(child => extractStringChar(input, child))
  };
}
function extractStringChar(input, node) {
  return {
    __rule__: "stringChar",
    __text__: textForSpan(input, node.span)
  };
}
function extractValue(input, node) {
  return {
    __rule__: "value",
    __text__: textForSpan(input, node.span),
    object: extractObject(input, childByName(node, "object")),
    array: extractArray(input, childByName(node, "array")),
    int: extractInt(input, childByName(node, "int")),
    string: extractString(input, childByName(node, "string")),
    null: extractNull(input, childByName(node, "null"))
  };
}
