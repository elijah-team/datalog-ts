main :- value.
value :- (object | array | int | string | null).
int :- [[0-9], repSep([0-9], "")].
object :- ["{", repSep(keyValue, ","), "}"].
keyValue :- [string, ":", value].
array :- ["[", repSep(value, ","), "]"].
null :- "null".
string :- ["\"", repSep(stringChar, ""), "\""].
stringChar :- (^'"' | ['\\', '"']).
----
text/plain
function extract_array(input, node) {
  return {
    __rule__: "array",
    __text__: textForSpan(input, node.span),
    value: extract_value(input, childByName(node, "value"))
  };
}
function extract_int(input, node) {
  return {
    __rule__: "int",
    __text__: textForSpan(input, node.span)
  };
}
function extract_keyValue(input, node) {
  return {
    __rule__: "keyValue",
    __text__: textForSpan(input, node.span),
    string: extract_string(input, childByName(node, "string")),
    value: extract_value(input, childByName(node, "value"))
  };
}
function extract_main(input, node) {
  return {
    __rule__: "main",
    __text__: textForSpan(input, node.span),
    value: extract_value(input, childByName(node, "value"))
  };
}
function extract_null(input, node) {
  return {
    __rule__: "null",
    __text__: textForSpan(input, node.span)
  };
}
function extract_object(input, node) {
  return {
    __rule__: "object",
    __text__: textForSpan(input, node.span),
    keyValue: extract_keyValue(input, childByName(node, "keyValue"))
  };
}
function extract_string(input, node) {
  return {
    __rule__: "string",
    __text__: textForSpan(input, node.span),
    stringChar: extract_stringChar(input, childByName(node, "stringChar"))
  };
}
function extract_stringChar(input, node) {
  return {
    __rule__: "stringChar",
    __text__: textForSpan(input, node.span)
  };
}
function extract_value(input, node) {
  return {
    __rule__: "value",
    __text__: textForSpan(input, node.span),
    object: extract_object(input, childByName(node, "object")),
    array: extract_array(input, childByName(node, "array")),
    int: extract_int(input, childByName(node, "int")),
    string: extract_string(input, childByName(node, "string")),
    null: extract_null(input, childByName(node, "null"))
  };
}

