main :- value.
value :- (object | array | int | string | null).
int :- [[0-9], repSep([0-9], "")].
object :- ["{", repSep(keyValue, ","), "}"].
keyValue :- [string, ":", value].
array :- ["[", repSep(value, ","), "]"].
null :- "null".
string :- ["\"", repSep(stringChar, ""), "\""].
stringChar :- (^'"' | ['\\', '"']).
----
text/plain
import {textForSpan, childByName, childrenByName, RuleTree} from "./ruleTree";
import {Span} from "./grammar";
export type JsonArray = {
  type: "Array";
  text: string;
  span: Span;
  value: JsonValue[];
};
export type JsonInt = {
  type: "Int";
  text: string;
  span: Span;
};
export type JsonKeyValue = {
  type: "KeyValue";
  text: string;
  span: Span;
  string: JsonString;
  value: JsonValue;
};
export type JsonMain = {
  type: "Main";
  text: string;
  span: Span;
  value: JsonValue;
};
export type JsonNull = {
  type: "Null";
  text: string;
  span: Span;
};
export type JsonObject = {
  type: "Object";
  text: string;
  span: Span;
  keyValue: JsonKeyValue[];
};
export type JsonString = {
  type: "String";
  text: string;
  span: Span;
  stringChar: JsonStringChar[];
};
export type JsonStringChar = {
  type: "StringChar";
  text: string;
  span: Span;
};
export type JsonValue = {
  type: "Value";
  text: string;
  span: Span;
  object: JsonObject;
  array: JsonArray;
  int: JsonInt;
  string: JsonString;
  null: JsonNull;
};
function extractArray(input: string, node: RuleTree): JsonArray {
  return {
    type: "Array",
    text: textForSpan(input, node.span),
    span: node.span,
    value: childrenByName(node, "value").map(child => extractValue(input, child))
  };
}
function extractInt(input: string, node: RuleTree): JsonInt {
  return {
    type: "Int",
    text: textForSpan(input, node.span),
    span: node.span
  };
}
function extractKeyValue(input: string, node: RuleTree): JsonKeyValue {
  return {
    type: "KeyValue",
    text: textForSpan(input, node.span),
    span: node.span,
    string: extractString(input, childByName(node, "string")),
    value: extractValue(input, childByName(node, "value"))
  };
}
function extractMain(input: string, node: RuleTree): JsonMain {
  return {
    type: "Main",
    text: textForSpan(input, node.span),
    span: node.span,
    value: extractValue(input, childByName(node, "value"))
  };
}
function extractNull(input: string, node: RuleTree): JsonNull {
  return {
    type: "Null",
    text: textForSpan(input, node.span),
    span: node.span
  };
}
function extractObject(input: string, node: RuleTree): JsonObject {
  return {
    type: "Object",
    text: textForSpan(input, node.span),
    span: node.span,
    keyValue: childrenByName(node, "keyValue").map(child => extractKeyValue(input, child))
  };
}
function extractString(input: string, node: RuleTree): JsonString {
  return {
    type: "String",
    text: textForSpan(input, node.span),
    span: node.span,
    stringChar: childrenByName(node, "stringChar").map(child => extractStringChar(input, child))
  };
}
function extractStringChar(input: string, node: RuleTree): JsonStringChar {
  return {
    type: "StringChar",
    text: textForSpan(input, node.span),
    span: node.span
  };
}
function extractValue(input: string, node: RuleTree): JsonValue {
  return {
    type: "Value",
    text: textForSpan(input, node.span),
    span: node.span,
    object: extractObject(input, childByName(node, "object")),
    array: extractArray(input, childByName(node, "array")),
    int: extractInt(input, childByName(node, "int")),
    string: extractString(input, childByName(node, "string")),
    null: extractNull(input, childByName(node, "null"))
  };
}
