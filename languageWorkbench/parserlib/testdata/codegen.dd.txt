main :- value.
value :- (object | array | int | string | null).
int :- [[0-9], repSep([0-9], "")].
object :- ["{", repSep(keyValue, ","), "}"].
keyValue :- [string, ":", value].
array :- ["[", repSep(value, ","), "]"].
null :- "null".
string :- ["\"", repSep(stringChar, ""), "\""].
stringChar :- (^'"' | ['\\', '"']).
----
text/plain
// generated by parserlib; do not edit.
import {textForSpan, childByName, childrenByName, RuleTree, extractRuleTree} from "./ruleTree";
import {Span, Grammar} from "./types";
import * as parserlib from "./parser"
export type JsonArray = {
  type: "Array";
  text: string;
  span: Span;
  value: JsonValue[];
};
export type JsonInt = {
  type: "Int";
  text: string;
  span: Span;
};
export type JsonKeyValue = {
  type: "KeyValue";
  text: string;
  span: Span;
  string: JsonString;
  value: JsonValue;
};
export type JsonMain = {
  type: "Main";
  text: string;
  span: Span;
  value: JsonValue;
};
export type JsonNull = {
  type: "Null";
  text: string;
  span: Span;
};
export type JsonObject = {
  type: "Object";
  text: string;
  span: Span;
  keyValue: JsonKeyValue[];
};
export type JsonString = {
  type: "String";
  text: string;
  span: Span;
  stringChar: JsonStringChar[];
};
export type JsonStringChar = {
  type: "StringChar";
  text: string;
  span: Span;
};
export type JsonValue = JsonObject | JsonArray | JsonInt | JsonString | JsonNull;
export function parseArray(input: string): JsonArray {
  const traceTree = parserlib.parse(GRAMMAR, "array", input)
  const ruleTree = extractRuleTree(traceTree)
  return extractArray(input, ruleTree)
}
export function parseInt(input: string): JsonInt {
  const traceTree = parserlib.parse(GRAMMAR, "int", input)
  const ruleTree = extractRuleTree(traceTree)
  return extractInt(input, ruleTree)
}
export function parseKeyValue(input: string): JsonKeyValue {
  const traceTree = parserlib.parse(GRAMMAR, "keyValue", input)
  const ruleTree = extractRuleTree(traceTree)
  return extractKeyValue(input, ruleTree)
}
export function parseMain(input: string): JsonMain {
  const traceTree = parserlib.parse(GRAMMAR, "main", input)
  const ruleTree = extractRuleTree(traceTree)
  return extractMain(input, ruleTree)
}
export function parseNull(input: string): JsonNull {
  const traceTree = parserlib.parse(GRAMMAR, "null", input)
  const ruleTree = extractRuleTree(traceTree)
  return extractNull(input, ruleTree)
}
export function parseObject(input: string): JsonObject {
  const traceTree = parserlib.parse(GRAMMAR, "object", input)
  const ruleTree = extractRuleTree(traceTree)
  return extractObject(input, ruleTree)
}
export function parseString(input: string): JsonString {
  const traceTree = parserlib.parse(GRAMMAR, "string", input)
  const ruleTree = extractRuleTree(traceTree)
  return extractString(input, ruleTree)
}
export function parseStringChar(input: string): JsonStringChar {
  const traceTree = parserlib.parse(GRAMMAR, "stringChar", input)
  const ruleTree = extractRuleTree(traceTree)
  return extractStringChar(input, ruleTree)
}
export function parseValue(input: string): JsonValue {
  const traceTree = parserlib.parse(GRAMMAR, "value", input)
  const ruleTree = extractRuleTree(traceTree)
  return extractValue(input, ruleTree)
}
function extractArray(input: string, node: RuleTree): JsonArray {
  return {
    type: "Array",
    text: textForSpan(input, node.span),
    span: node.span,
    value: childrenByName(node, "value").map(child => extractValue(input, child))
  };
}
function extractInt(input: string, node: RuleTree): JsonInt {
  return {
    type: "Int",
    text: textForSpan(input, node.span),
    span: node.span
  };
}
function extractKeyValue(input: string, node: RuleTree): JsonKeyValue {
  return {
    type: "KeyValue",
    text: textForSpan(input, node.span),
    span: node.span,
    string: extractString(input, childByName(node, "string", null)),
    value: extractValue(input, childByName(node, "value", null))
  };
}
function extractMain(input: string, node: RuleTree): JsonMain {
  return {
    type: "Main",
    text: textForSpan(input, node.span),
    span: node.span,
    value: extractValue(input, childByName(node, "value", null))
  };
}
function extractNull(input: string, node: RuleTree): JsonNull {
  return {
    type: "Null",
    text: textForSpan(input, node.span),
    span: node.span
  };
}
function extractObject(input: string, node: RuleTree): JsonObject {
  return {
    type: "Object",
    text: textForSpan(input, node.span),
    span: node.span,
    keyValue: childrenByName(node, "keyValue").map(child => extractKeyValue(input, child))
  };
}
function extractString(input: string, node: RuleTree): JsonString {
  return {
    type: "String",
    text: textForSpan(input, node.span),
    span: node.span,
    stringChar: childrenByName(node, "stringChar").map(child => extractStringChar(input, child))
  };
}
function extractStringChar(input: string, node: RuleTree): JsonStringChar {
  return {
    type: "StringChar",
    text: textForSpan(input, node.span),
    span: node.span
  };
}
function extractValue(input: string, node: RuleTree): JsonValue {
  const child = node.children[0];
  switch (child.name) {
    case "object":
      {
        return extractObject(input, child);
      }
    case "array":
      {
        return extractArray(input, child);
      }
    case "int":
      {
        return extractInt(input, child);
      }
    case "string":
      {
        return extractString(input, child);
      }
    case "null":
      {
        return extractNull(input, child);
      }
  }
}
const GRAMMAR: Grammar = {
  "main": {
    "type": "Ref",
    "captureName": null,
    "rule": "value"
  },
  "value": {
    "type": "Choice",
    "choices": [
      {
        "type": "Ref",
        "captureName": null,
        "rule": "object"
      },
      {
        "type": "Ref",
        "captureName": null,
        "rule": "array"
      },
      {
        "type": "Ref",
        "captureName": null,
        "rule": "int"
      },
      {
        "type": "Ref",
        "captureName": null,
        "rule": "string"
      },
      {
        "type": "Ref",
        "captureName": null,
        "rule": "null"
      }
    ]
  },
  "int": {
    "type": "Sequence",
    "items": [
      {
        "type": "Char",
        "rule": {
          "type": "Range",
          "from": "0",
          "to": "9"
        }
      },
      {
        "type": "RepSep",
        "rep": {
          "type": "Char",
          "rule": {
            "type": "Range",
            "from": "0",
            "to": "9"
          }
        },
        "sep": {
          "type": "Text",
          "value": ""
        }
      }
    ]
  },
  "object": {
    "type": "Sequence",
    "items": [
      {
        "type": "Text",
        "value": "{"
      },
      {
        "type": "RepSep",
        "rep": {
          "type": "Ref",
          "captureName": null,
          "rule": "keyValue"
        },
        "sep": {
          "type": "Text",
          "value": ","
        }
      },
      {
        "type": "Text",
        "value": "}"
      }
    ]
  },
  "keyValue": {
    "type": "Sequence",
    "items": [
      {
        "type": "Ref",
        "captureName": null,
        "rule": "string"
      },
      {
        "type": "Text",
        "value": ":"
      },
      {
        "type": "Ref",
        "captureName": null,
        "rule": "value"
      }
    ]
  },
  "array": {
    "type": "Sequence",
    "items": [
      {
        "type": "Text",
        "value": "["
      },
      {
        "type": "RepSep",
        "rep": {
          "type": "Ref",
          "captureName": null,
          "rule": "value"
        },
        "sep": {
          "type": "Text",
          "value": ","
        }
      },
      {
        "type": "Text",
        "value": "]"
      }
    ]
  },
  "null": {
    "type": "Text",
    "value": "null"
  },
  "string": {
    "type": "Sequence",
    "items": [
      {
        "type": "Text",
        "value": "\\\""
      },
      {
        "type": "RepSep",
        "rep": {
          "type": "Ref",
          "captureName": null,
          "rule": "stringChar"
        },
        "sep": {
          "type": "Text",
          "value": ""
        }
      },
      {
        "type": "Text",
        "value": "\\\""
      }
    ]
  },
  "stringChar": {
    "type": "Choice",
    "choices": [
      {
        "type": "Char",
        "rule": {
          "type": "Not",
          "rule": {
            "type": "Literal",
            "value": "\""
          }
        }
      },
      {
        "type": "Sequence",
        "items": [
          {
            "type": "Char",
            "rule": {
              "type": "Literal",
              "value": "\\"
            }
          },
          {
            "type": "Char",
            "rule": {
              "type": "Literal",
              "value": "\""
            }
          }
        ]
      }
    ]
  }
}
