2
T
----
tc.Type{id: 0, type: T[]@"int"}; {T[tc.Type[]]: T[]}
  tc.typeI{id: I[tc.Type[]]@0, type: T[tc.Type[]]@"int"}; {I[tc.Type[], tc.typeI[or(1), and(0)]]: I[tc.Type[]]}
    ast.IntLit{id: I[tc.Type[], tc.typeI[or(1), and(0)]]@0, location: span{from: I[tc.Type[], tc.typeI[or(1), and(0)]]@0, to: 1}, val: 2}
CHILD PATHS
T[]

let x = 2 in x
T
----
tc.Type{id: 0, type: T[]@"int"}; {T[tc.Type[]]: T[]}
  tc.typeLet{id: I[tc.Type[]]@0, type: T[tc.Type[]]@"int"}; {I[tc.Type[], tc.typeLet[or(4), and(0)]]: I[tc.Type[]], T[tc.Type[], tc.typeLet[or(4), and(0)]]: T[tc.Type[]]}
    ast.LetExpr{bindingID: 1, bodyID: BID[tc.Type[], tc.typeLet[or(4), and(0)]]@2, id: I[tc.Type[], tc.typeLet[or(4), and(0)]]@0, inLoc: span{from: 10, to: 13}, letLoc: span{from: I[tc.Type[], tc.typeLet[or(4), and(0)]]@0, to: 4}, location: span{from: I[tc.Type[], tc.typeLet[or(4), and(0)]]@0, to: 14}, varLoc: span{from: 4, to: 5}, varName: "x"}
    tc.Type{id: BID[tc.Type[], tc.typeLet[or(4), and(0)]]@2, type: T[tc.Type[], tc.typeLet[or(4), and(0)]]@"int"}; {I[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)]]: BID[tc.Type[], tc.typeLet[or(4), and(0)]], T[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)]]: T[tc.Type[], tc.typeLet[or(4), and(0)]]}
      tc.typeVar{id: I[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)]]@2, type: T[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)]]@"int"}; {I[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)]]: I[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)]], T[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)]]: T[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)]]}
        ast.Var{id: I[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)]]@2, location: span{from: 13, to: 14}, name: N[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)]]@"x"}
        tc.ScopeItem{id: I[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)]]@2, location: span{from: 4, to: 5}, name: N[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)]]@"x", type: T[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)]]@"int"}; {I[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)]]: I[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)]], N[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)]]: N[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)]], T[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)]]: T[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)]]}
          tc.scopeLet{id: I[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)]]@2, location: L[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)]]@span{from: 4, to: 5}, name: N[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)]]@"x", type: T[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)]]@"int"}; {I[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)], tc.scopeLet[or(1), and(0)]]: I[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)]], L[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)], tc.scopeLet[or(1), and(0)]]: L[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)]], N[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)], tc.scopeLet[or(1), and(0)]]: N[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)]], T[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)], tc.scopeLet[or(1), and(0)]]: T[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)]]}
            ast.LetExpr{bindingID: B[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)], tc.scopeLet[or(1), and(0)]]@1, bodyID: I[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)], tc.scopeLet[or(1), and(0)]]@2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 14}, varLoc: L[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)], tc.scopeLet[or(1), and(0)]]@span{from: 4, to: 5}, varName: N[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)], tc.scopeLet[or(1), and(0)]]@"x"}
            tc.Type{id: B[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)], tc.scopeLet[or(1), and(0)]]@1, type: T[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)], tc.scopeLet[or(1), and(0)]]@"int"}; {I[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)], tc.scopeLet[or(1), and(0)], tc.Type[or(0), and(1), and(0)]]: B[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)], tc.scopeLet[or(1), and(0)]], T[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)], tc.scopeLet[or(1), and(0)], tc.Type[or(0), and(1), and(0)]]: T[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)], tc.scopeLet[or(1), and(0)]]}
              tc.typeI{id: I[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)], tc.scopeLet[or(1), and(0)], tc.Type[or(0), and(1), and(0)]]@1, type: T[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)], tc.scopeLet[or(1), and(0)], tc.Type[or(0), and(1), and(0)]]@"int"}; {I[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)], tc.scopeLet[or(1), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeI[or(1), and(0)]]: I[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)], tc.scopeLet[or(1), and(0)], tc.Type[or(0), and(1), and(0)]]}
                ast.IntLit{id: I[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)], tc.scopeLet[or(1), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeI[or(1), and(0)]]@1, location: span{from: 8, to: 9}, val: 2}
CHILD PATHS
T[]
T[tc.Type[]]
T[tc.Type[], tc.typeLet[or(4), and(0)]]
T[tc.Type[], tc.typeLet[or(4), and(0)]]
T[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)]]
T[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)]]
T[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)]]
T[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)]]
T[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)], tc.scopeLet[or(1), and(0)]]
T[tc.Type[], tc.typeLet[or(4), and(0)], tc.Type[or(0), and(1), and(0)], tc.typeVar[or(5), and(0)], tc.ScopeItem[or(0), and(1), and(0)], tc.scopeLet[or(1), and(0)]]
