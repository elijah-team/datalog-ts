2
----
text/plain
tc.Type{id: 0, type: T@"int"}; {T: T}
  tc.typeI{id: I@0, type: T@"int"}; {I: I}
    ast.IntLit{id: I@0, location: span{from: I@0, to: 1}, val: 2}
CHILD PATHS

let x = 2 in x
----
text/plain
tc.Type{id: 0, type: T@"int"}; {T: T}
  tc.typeLet{id: I@0, type: T@"int"}; {I: I, T: T}
    ast.LetExpr{bindingID: 1, bodyID: BID@2, id: I@0, inLoc: span{from: 10, to: 13}, letLoc: span{from: I@0, to: 4}, location: span{from: I@0, to: 14}, varLoc: span{from: 4, to: 5}, varName: "x"}
    tc.Type{id: BID@2, type: T@"int"}; {I: BID, T: T}
      tc.typeVar{id: I@2, type: T@"int"}; {I: I, T: T}
        ast.Var{id: I@2, location: span{from: 13, to: 14}, name: N@"x"}
        tc.ScopeItem{id: I@2, location: span{from: 4, to: 5}, name: N@"x", type: T@"int"}; {I: I, N: N, T: T}
          tc.scopeLet{id: I@2, location: L@span{from: 4, to: 5}, name: N@"x", type: T@"int"}; {I: I, L: L, N: N, T: T}
            ast.LetExpr{bindingID: B@1, bodyID: I@2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 14}, varLoc: L@span{from: 4, to: 5}, varName: N@"x"}
            tc.Type{id: B@1, type: T@"int"}; {I: B, T: T}
              tc.typeI{id: I@1, type: T@"int"}; {I: I}
                ast.IntLit{id: I@1, location: span{from: 8, to: 9}, val: 2}
CHILD PATHS
