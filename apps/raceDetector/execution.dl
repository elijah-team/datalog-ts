.table instr

timeLimit{limit: 20}.

# Overall control flow

state{time: T, threadID: I, state: S} :-
  initialState{time: T, threadID: I, state: S} |
  laterState{time: T, threadID: I, state: S}.

initialState{
  time: 0,
  threadID: 1,
  state: threadState{
    vars: {},
    pc: 0,
    done: false
  }
}.

laterState{time: T, threadID: TT, state: ToState} :-
  timeLimit{limit: TimeLimit} &
  range{from: 0, to: TimeLimit, val: T} &
  T = PrevT + 1 &
  state{time: PrevT, threadID: FT, state: FromState} &
  stepState{time: T, fromState: FromState, toState: ToState, fromThread: FT, toThread: TT}.

# Individual ops

stepState{time: T, fromState: FromState, toState: ToState, fromThread: FT, toThread: TT} :-
  stepStateNormal{fromState: FromState, toState: ToState, fromThread: FT, toThread: TT} |
  stepStateFork{time: T, fromState: FromState, toState: ToState, fromThread: FT, toThread: TT}.

stepStateFork{time: T, fromState: FromState, toState: ToState, fromThread: FT, toThread: TT} :-
  stepForkOrig{fromState: FromState, toState: ToState, fromThread: FT, toThread: TT} |
  stepForkForked{time: T, fromState: FromState, toState: ToState, fromThread: FT, toThread: TT}.

stepForkOrig{
  fromState: threadState{pc: FromPC, vars: FromVars},
  toState: threadState{pc: ToPC, vars: ToVars},
  fromThread: FT, toThread: TT
} :-
  instr{idx: FromPC, op: fork{goto: GotoPC}} &
  ToPC = FromPC + 1 &
  ToVars = FromVars &
  FT = TT.

stepForkForked{
  time: T,
  fromState: threadState{pc: FromPC, vars: FromVars},
  toState: threadState{pc: ToPC, vars: ToVars},
  fromThread: FT,
  toThread: TT
} :-
  instr{idx: FromPC, op: fork{goto: GotoPC}} &
  ToPC = GotoPC &
  ToVars = FromVars &
  ShiftedFT = FT + 100 &
  TT = ShiftedFT + T.
# ughhh

stepStateNormal{
  fromState: FromState,
  toState: ToState,
  fromThread: FT, toThread: TT
} :-
  stepOp{fromState: FromState, toState: ToState} &
  FT = TT.

stepOp{fromState: FromState, toState: ToState} :-
  stepStore{fromState: FromState, toState: ToState} |
  stepIncrement{fromState: FromState, toState: ToState} |
  stepConditionalGoto{fromState: FromState, toState: ToState} |
  stepStop{fromState: FromState, toState: ToState}.

stepStore{
  fromState: threadState{pc: FromPC, vars: FromVars},
  toState: threadState{pc: ToPC, vars: ToVars, done: false}
} :-
  instr{idx: FromPC, op: store{var: Var, val: Expr}} &
  eval{vars: FromVars, expr: Expr, value: Value} &
  dict.set{in: FromVars, key: Var, value: Value, out: ToVars} &
  ToPC = FromPC + 1.

stepIncrement{
  fromState: threadState{pc: FromPC, vars: FromVars},
  toState: threadState{pc: ToPC, vars: ToVars, done: false}
} :-
  instr{idx: FromPC, op: increment{var: Var}} &
  dict.item{dict: FromVars, key: Var, value: OldValue} &
  NewValue = OldValue + 1 &
  dict.set{in: FromVars, key: Var, value: NewValue, out: ToVars} &
  ToPC = FromPC + 1.

stepConditionalGoto{fromState: FromState, toState: ToState} :-
  stepConditionalGotoYes{fromState: FromState, toState: ToState} |
  stepConditionalGotoNo{fromState: FromState, toState: ToState}.

stepConditionalGotoYes{
  fromState: threadState{pc: FromPC, vars: FromVars},
  toState: threadState{pc: ToPC, vars: ToVars, done: false}
} :-
  instr{idx: FromPC, op: conditionalGoto{var: Var, dest: ToPC}} &
  dict.item{dict: FromVars, key: Var, value: Val} &
  Val = true &
  FromVars = ToVars.
stepConditionalGotoNo{
  fromState: threadState{pc: FromPC, vars: FromVars},
  toState: threadState{pc: ToPC, vars: ToVars, done: false}
} :-
  instr{idx: FromPC, op: conditionalGoto{var: Var, dest: Dest}} &
  dict.item{dict: FromVars, key: Var, value: Val} &
  Val != true &
  FromVars = ToVars &
  ToPC = FromPC + 1.

stepStop{
  fromState: threadState{pc: PC, vars: FromVars},
  toState: threadState{pc: PC, vars: ToVars, done: true}
} :-
  instr{idx: PC, op: stop{}} &
  FromVars = ToVars.

# Expressions

eval{vars: FromVars, expr: Expr, value: Value} :-
  evalLt{vars: FromVars, expr: Expr, value: Value} |
  evalIntLit{expr: Expr, value: Value}.

evalLt{vars: FromVars, expr: Expr, value: V} :-
  evalLtTrue{vars: FromVars, expr: Expr, value: V} |
  evalLtFalse{vars: FromVars, expr: Expr, value: V}.
# this pattern is so wonky lol
evalLtTrue{vars: FromVars, expr: lt{var: Var, val: LiteralVal}, value: true} :-
  dict.item{dict: FromVars, key: Var, value: VarVal} &
  VarVal < LiteralVal.
evalLtFalse{vars: FromVars, expr: lt{var: Var, val: LiteralVal}, value: false} :-
  dict.item{dict: FromVars, key: Var, value: VarVal} &
  VarVal >= LiteralVal.
evalIntLit{expr: Expr, value: Value} :-
  base.int{a: Expr} &
  Expr = Value.

# debugging

debug.stepStateNormalTest{toState: ToState, toThread: TT} :-
  initialState{state: S} &
  stepState{fromState: S, toState: ToState, fromThread: I, toThread: TT}.

debug.threadIDStringTest{threadID: I} :-
  state{time: T, threadID: spawned{fromThread: I}}.

debug.threadIDStringTest2{threadID: I} :-
  state{time: T, threadID: I}.

# tree viz

viz.threadNode{id: I, parentID: P, display: I} :-
  viz.initialThreadNode{id: I, parentID: P} |
  viz.childThreadNode{id: I, parentID: P}.

viz.initialThreadNode{id: I, parentID: -1} :-
  initialState{time: T, threadID: I}.

viz.childThreadNode{id: I, parentID: P} :-
  viz.spawnMessage{
    fromTickID: viz.tick{place: P},
    toTickID: viz.tick{place: I},
  }.

internal.visualization{
  name: "Thread Tree",
  spec: tree{
    nodes: viz.threadNode{id: ID, parentID: ParentID, display: Display},
    rootTerm: -1
  }
}.

# chart viz

viz.programCounter{time: T, threadID: I, pc: PC} :-
  state{time: T, threadID: I, state: threadState{pc: PC}}.

internal.visualization{
  name: "Program Counter over Time",
  spec: vegalite{
    mark: "line",
    encoding: encoding{
      x: mapping{field: "time", type: "quantitative"},
      y: mapping{field: "pc", type: "quantitative"},
      color: mapping{field: "threadID"}
    },
    query: viz.programCounter{}
  }
}.

# seq diagram viz

viz.message{fromTickID: FromTickID, toTickID: ToTickID} :-
  viz.spawnMessage{fromTickID: FromTickID, toTickID: ToTickID} |
  viz.continueMessage{fromTickID: FromTickID, toTickID: ToTickID}.

viz.spawnMessage{
  fromTickID: viz.tick{time: FromTime, place: FT},
  toTickID: viz.tick{time: ToTime, place: TT},
} :-
  state{time: FromTime, state: FromState, threadID: FT} &
  state{time: ToTime, state: ToState, threadID: TT} &
  stepForkForked{time: ToTime, fromState: FromState, toState: ToState, fromThread: FT, toThread: TT}.

viz.continueMessage{
  fromTickID: viz.tick{time: FT, place: Thread},
  toTickID: viz.tick{time: TT, place: Thread},
} :-
  state{time: FT, threadID: Thread} &
  state{time: TT, threadID: Thread} &
  TT = FT + 1.

viz.tick{time: T, place: P} :-
  state{threadID: P, time: T}.

# actors: threads
# ticks: thread states
# messages:
# - thread state advances
# - thread spawns another thread
internal.visualization{
  name: "Overview",
  spec: sequence{
    actors: viz.threadNode{id: ID},
    ticks: state{time: Time, threadID: Place},
    messages: viz.message{fromTickID: FromTick, toTickID: ToTick},
  },
}.
