addClient{id: "0"}.
runMutation{from: "0", name: "deposit", args: ["foo", 10]}.
runMutation{from: "0", name: "deposit", args: ["bar", 10]}.
runMutation{from: "0", name: "move", args: ["foo", "bar", 5]}.
runMutation{from: "0", name: "move", args: ["foo", "bar", 5]}.
----
application/datalog
actor{id: "server", initialState: ServerState{data: [], liveQueries: [], mutationDefns: {deposit: Lambda{args: ["toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, move: Lambda{args: ["fromAccount","toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "fromBalance"},{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, withdraw: Lambda{args: ["fromAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}}}}}, spawningTickID: "0"}.
actor{id: "user0", initialState: UserState{}, spawningTickID: "0"}.
actor{id: "client0", initialState: UserState{}, spawningTickID: "0"}.
message{fromTickID: "3", id: "3", payload: RunMutation{args: ["foo",10], name: "deposit"}, toActorID: "client0"}.
message{fromTickID: "6", id: "6", payload: RunMutation{args: ["bar",10], name: "deposit"}, toActorID: "client0"}.
message{fromTickID: "9", id: "9", payload: RunMutation{args: ["foo","bar",5], name: "move"}, toActorID: "client0"}.
message{fromTickID: "12", id: "12", payload: RunMutation{args: ["foo","bar",5], name: "move"}, toActorID: "client0"}.
tick{actorID: "server", id: "0", initiator: spawned{initialState: ServerState{data: [], liveQueries: [], mutationDefns: {deposit: Lambda{args: ["toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, move: Lambda{args: ["fromAccount","toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "fromBalance"},{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, withdraw: Lambda{args: ["fromAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}}}}}, spawningTickID: "0"}, resp: continue{messages: [], state: ServerState{data: [], liveQueries: [], mutationDefns: {deposit: Lambda{args: ["toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, move: Lambda{args: ["fromAccount","toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "fromBalance"},{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, withdraw: Lambda{args: ["fromAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}}}}}}}.
tick{actorID: "user0", id: "1", initiator: spawned{initialState: UserState{}, spawningTickID: "0"}, resp: continue{messages: [], state: UserState{}}}.
tick{actorID: "client0", id: "2", initiator: spawned{initialState: UserState{}, spawningTickID: "0"}, resp: continue{messages: [], state: UserState{}}}.
tick{actorID: "user0", id: "3", initiator: userInput{}, resp: continue{messages: [{msg: RunMutation{args: ["foo",10], name: "deposit"}, to: "client0"}], state: UserState{}}}.
tick{actorID: "client0", id: "5", initiator: messageReceived{messageID: "3"}, resp: continue{messages: [], state: UserState{}}}.
tick{actorID: "user0", id: "6", initiator: userInput{}, resp: continue{messages: [{msg: RunMutation{args: ["bar",10], name: "deposit"}, to: "client0"}], state: UserState{}}}.
tick{actorID: "client0", id: "8", initiator: messageReceived{messageID: "6"}, resp: continue{messages: [], state: UserState{}}}.
tick{actorID: "user0", id: "9", initiator: userInput{}, resp: continue{messages: [{msg: RunMutation{args: ["foo","bar",5], name: "move"}, to: "client0"}], state: UserState{}}}.
tick{actorID: "client0", id: "11", initiator: messageReceived{messageID: "9"}, resp: continue{messages: [], state: UserState{}}}.
tick{actorID: "user0", id: "12", initiator: userInput{}, resp: continue{messages: [{msg: RunMutation{args: ["foo","bar",5], name: "move"}, to: "client0"}], state: UserState{}}}.
tick{actorID: "client0", id: "14", initiator: messageReceived{messageID: "12"}, resp: continue{messages: [], state: UserState{}}}.
