addClient{id: "0"}.
runMutation{from: "0", name: "deposit", args: ["foo", 10]}.
runMutation{from: "0", name: "deposit", args: ["bar", 10]}.
runMutation{from: "0", name: "move", args: ["foo", "bar", 5]}.
runMutation{from: "0", name: "move", args: ["foo", "bar", 5]}.
----
application/datalog
actor{id: "server", initialState: ServerState{data: [], liveQueries: [], mutationDefns: {deposit: Lambda{args: ["toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, move: Lambda{args: ["fromAccount","toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "fromBalance"},{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, withdraw: Lambda{args: ["fromAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}}}}}, spawningTickID: "0"}.
actor{id: "user0", initialState: UserState{}, spawningTickID: "0"}.
actor{id: "client0", initialState: ClientState{data: {}, liveQueries: {}, mutationDefns: {deposit: Lambda{args: ["toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, move: Lambda{args: ["fromAccount","toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "fromBalance"},{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, withdraw: Lambda{args: ["fromAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}}}}, randSeed: 10, transactions: {}}, spawningTickID: "0"}.
message{fromTickID: "3", id: "3", payload: RunMutation{args: ["foo",10], name: "deposit"}, toActorID: "client0"}.
message{fromTickID: "5", id: "6", payload: MutationRequest{id: "1806", invocation: {args: ["foo",10], name: "deposit"}, trace: [Read{key: "foo", transactionID: "-1"},Write{key: "foo", value: 10}]}, toActorID: "server"}.
message{fromTickID: "7", id: "8", payload: MutationResponse{id: "1806", payload: Accept{}}, toActorID: "client0"}.
message{fromTickID: "10", id: "10", payload: RunMutation{args: ["bar",10], name: "deposit"}, toActorID: "client0"}.
message{fromTickID: "12", id: "13", payload: MutationRequest{id: "422070", invocation: {args: ["bar",10], name: "deposit"}, trace: [Read{key: "bar", transactionID: "-1"},Write{key: "bar", value: 10}]}, toActorID: "server"}.
message{fromTickID: "14", id: "15", payload: MutationResponse{id: "422070", payload: Accept{}}, toActorID: "client0"}.
message{fromTickID: "17", id: "17", payload: RunMutation{args: ["foo","bar",5], name: "move"}, toActorID: "client0"}.
message{fromTickID: "19", id: "20", payload: MutationRequest{id: "4529256", invocation: {args: ["foo","bar",5], name: "move"}, trace: [Read{key: "foo", transactionID: "1806"},Read{key: "bar", transactionID: "422070"},Write{key: "foo", value: 5},Write{key: "bar", value: 15}]}, toActorID: "server"}.
message{fromTickID: "21", id: "22", payload: MutationResponse{id: "4529256", payload: Accept{}}, toActorID: "client0"}.
message{fromTickID: "24", id: "24", payload: RunMutation{args: ["foo","bar",5], name: "move"}, toActorID: "client0"}.
message{fromTickID: "26", id: "27", payload: MutationRequest{id: "2323860", invocation: {args: ["foo","bar",5], name: "move"}, trace: [Read{key: "foo", transactionID: "4529256"},Read{key: "bar", transactionID: "4529256"},Write{key: "foo", value: 0},Write{key: "bar", value: 20}]}, toActorID: "server"}.
message{fromTickID: "28", id: "29", payload: MutationResponse{id: "2323860", payload: Reject{reason: "trace not equal", serverTrace: [Read{key: "foo", transactionID: "1806"},Read{key: "bar", transactionID: "422070"},Write{key: "foo", value: 5},Write{key: "bar", value: 15}]}}, toActorID: "client0"}.
tick{actorID: "server", id: "0", initiator: spawned{initialState: ServerState{data: [], liveQueries: [], mutationDefns: {deposit: Lambda{args: ["toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, move: Lambda{args: ["fromAccount","toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "fromBalance"},{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, withdraw: Lambda{args: ["fromAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}}}}}, spawningTickID: "0"}, resp: continue{messages: [], state: ServerState{data: [], liveQueries: [], mutationDefns: {deposit: Lambda{args: ["toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, move: Lambda{args: ["fromAccount","toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "fromBalance"},{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, withdraw: Lambda{args: ["fromAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}}}}}}}.
tick{actorID: "user0", id: "1", initiator: spawned{initialState: UserState{}, spawningTickID: "0"}, resp: continue{messages: [], state: UserState{}}}.
tick{actorID: "client0", id: "2", initiator: spawned{initialState: ClientState{data: {}, liveQueries: {}, mutationDefns: {deposit: Lambda{args: ["toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, move: Lambda{args: ["fromAccount","toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "fromBalance"},{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, withdraw: Lambda{args: ["fromAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}}}}, randSeed: 10, transactions: {}}, spawningTickID: "0"}, resp: continue{messages: [], state: ClientState{data: {}, liveQueries: {}, mutationDefns: {deposit: Lambda{args: ["toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, move: Lambda{args: ["fromAccount","toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "fromBalance"},{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, withdraw: Lambda{args: ["fromAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}}}}, randSeed: 10, transactions: {}}}}.
tick{actorID: "user0", id: "3", initiator: userInput{}, resp: continue{messages: [{msg: RunMutation{args: ["foo",10], name: "deposit"}, to: "client0"}], state: UserState{}}}.
tick{actorID: "client0", id: "5", initiator: messageReceived{messageID: "3"}, resp: continue{messages: [{msg: MutationRequest{id: "1806", invocation: {args: ["foo",10], name: "deposit"}, trace: [Read{key: "foo", transactionID: "-1"},Write{key: "foo", value: 10}]}, to: "server"}], state: ClientState{data: {foo: {transactionID: "1806", value: 10}}, liveQueries: {}, mutationDefns: {deposit: Lambda{args: ["toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, move: Lambda{args: ["fromAccount","toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "fromBalance"},{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, withdraw: Lambda{args: ["fromAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}}}}, randSeed: 1806, transactions: {1806: {invocation: {args: ["foo",10], name: "deposit"}, state: Pending{}}}}}}.
tick{actorID: "server", id: "7", initiator: messageReceived{messageID: "6"}, resp: continue{messages: [{msg: MutationResponse{id: "1806", payload: Accept{}}, to: "client0"}], state: ServerState{data: [{key: "foo", value: {transactionID: "1806", value: 10}}], liveQueries: [], mutationDefns: {deposit: Lambda{args: ["toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, move: Lambda{args: ["fromAccount","toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "fromBalance"},{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, withdraw: Lambda{args: ["fromAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}}}}}}}.
tick{actorID: "client0", id: "9", initiator: messageReceived{messageID: "8"}, resp: continue{messages: [], state: ClientState{data: {foo: {transactionID: "1806", value: 10}}, liveQueries: {}, mutationDefns: {deposit: Lambda{args: ["toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, move: Lambda{args: ["fromAccount","toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "fromBalance"},{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, withdraw: Lambda{args: ["fromAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}}}}, randSeed: 1806, transactions: {1806: {invocation: {args: ["foo",10], name: "deposit"}, state: Committed{}}}}}}.
tick{actorID: "user0", id: "10", initiator: userInput{}, resp: continue{messages: [{msg: RunMutation{args: ["bar",10], name: "deposit"}, to: "client0"}], state: UserState{}}}.
tick{actorID: "client0", id: "12", initiator: messageReceived{messageID: "10"}, resp: continue{messages: [{msg: MutationRequest{id: "422070", invocation: {args: ["bar",10], name: "deposit"}, trace: [Read{key: "bar", transactionID: "-1"},Write{key: "bar", value: 10}]}, to: "server"}], state: ClientState{data: {bar: {transactionID: "422070", value: 10}, foo: {transactionID: "1806", value: 10}}, liveQueries: {}, mutationDefns: {deposit: Lambda{args: ["toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, move: Lambda{args: ["fromAccount","toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "fromBalance"},{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, withdraw: Lambda{args: ["fromAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}}}}, randSeed: 422070, transactions: {1806: {invocation: {args: ["foo",10], name: "deposit"}, state: Committed{}}, 422070: {invocation: {args: ["bar",10], name: "deposit"}, state: Pending{}}}}}}.
tick{actorID: "server", id: "14", initiator: messageReceived{messageID: "13"}, resp: continue{messages: [{msg: MutationResponse{id: "422070", payload: Accept{}}, to: "client0"}], state: ServerState{data: [{key: "bar", value: {transactionID: "422070", value: 10}},{key: "foo", value: {transactionID: "1806", value: 10}}], liveQueries: [], mutationDefns: {deposit: Lambda{args: ["toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, move: Lambda{args: ["fromAccount","toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "fromBalance"},{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, withdraw: Lambda{args: ["fromAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}}}}}}}.
tick{actorID: "client0", id: "16", initiator: messageReceived{messageID: "15"}, resp: continue{messages: [], state: ClientState{data: {bar: {transactionID: "422070", value: 10}, foo: {transactionID: "1806", value: 10}}, liveQueries: {}, mutationDefns: {deposit: Lambda{args: ["toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, move: Lambda{args: ["fromAccount","toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "fromBalance"},{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, withdraw: Lambda{args: ["fromAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}}}}, randSeed: 422070, transactions: {1806: {invocation: {args: ["foo",10], name: "deposit"}, state: Committed{}}, 422070: {invocation: {args: ["bar",10], name: "deposit"}, state: Committed{}}}}}}.
tick{actorID: "user0", id: "17", initiator: userInput{}, resp: continue{messages: [{msg: RunMutation{args: ["foo","bar",5], name: "move"}, to: "client0"}], state: UserState{}}}.
tick{actorID: "client0", id: "19", initiator: messageReceived{messageID: "17"}, resp: continue{messages: [{msg: MutationRequest{id: "4529256", invocation: {args: ["foo","bar",5], name: "move"}, trace: [Read{key: "foo", transactionID: "1806"},Read{key: "bar", transactionID: "422070"},Write{key: "foo", value: 5},Write{key: "bar", value: 15}]}, to: "server"}], state: ClientState{data: {bar: {transactionID: "4529256", value: 15}, foo: {transactionID: "4529256", value: 5}}, liveQueries: {}, mutationDefns: {deposit: Lambda{args: ["toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, move: Lambda{args: ["fromAccount","toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "fromBalance"},{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, withdraw: Lambda{args: ["fromAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}}}}, randSeed: 4529256, transactions: {1806: {invocation: {args: ["foo",10], name: "deposit"}, state: Committed{}}, 422070: {invocation: {args: ["bar",10], name: "deposit"}, state: Committed{}}, 4529256: {invocation: {args: ["foo","bar",5], name: "move"}, state: Pending{}}}}}}.
tick{actorID: "server", id: "21", initiator: messageReceived{messageID: "20"}, resp: continue{messages: [{msg: MutationResponse{id: "4529256", payload: Accept{}}, to: "client0"}], state: ServerState{data: [{key: "bar", value: {transactionID: "422070", value: 10}},{key: "bar", value: {transactionID: "4529256", value: 15}},{key: "foo", value: {transactionID: "1806", value: 10}},{key: "foo", value: {transactionID: "4529256", value: 5}}], liveQueries: [], mutationDefns: {deposit: Lambda{args: ["toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, move: Lambda{args: ["fromAccount","toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "fromBalance"},{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, withdraw: Lambda{args: ["fromAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}}}}}}}.
tick{actorID: "client0", id: "23", initiator: messageReceived{messageID: "22"}, resp: continue{messages: [], state: ClientState{data: {bar: {transactionID: "4529256", value: 15}, foo: {transactionID: "4529256", value: 5}}, liveQueries: {}, mutationDefns: {deposit: Lambda{args: ["toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, move: Lambda{args: ["fromAccount","toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "fromBalance"},{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, withdraw: Lambda{args: ["fromAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}}}}, randSeed: 4529256, transactions: {1806: {invocation: {args: ["foo",10], name: "deposit"}, state: Committed{}}, 422070: {invocation: {args: ["bar",10], name: "deposit"}, state: Committed{}}, 4529256: {invocation: {args: ["foo","bar",5], name: "move"}, state: Committed{}}}}}}.
tick{actorID: "user0", id: "24", initiator: userInput{}, resp: continue{messages: [{msg: RunMutation{args: ["foo","bar",5], name: "move"}, to: "client0"}], state: UserState{}}}.
tick{actorID: "client0", id: "26", initiator: messageReceived{messageID: "24"}, resp: continue{messages: [{msg: MutationRequest{id: "2323860", invocation: {args: ["foo","bar",5], name: "move"}, trace: [Read{key: "foo", transactionID: "4529256"},Read{key: "bar", transactionID: "4529256"},Write{key: "foo", value: 0},Write{key: "bar", value: 20}]}, to: "server"}], state: ClientState{data: {bar: {transactionID: "2323860", value: 20}, foo: {transactionID: "2323860", value: 0}}, liveQueries: {}, mutationDefns: {deposit: Lambda{args: ["toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, move: Lambda{args: ["fromAccount","toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "fromBalance"},{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, withdraw: Lambda{args: ["fromAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}}}}, randSeed: 2323860, transactions: {1806: {invocation: {args: ["foo",10], name: "deposit"}, state: Committed{}}, 2323860: {invocation: {args: ["foo","bar",5], name: "move"}, state: Pending{}}, 422070: {invocation: {args: ["bar",10], name: "deposit"}, state: Committed{}}, 4529256: {invocation: {args: ["foo","bar",5], name: "move"}, state: Committed{}}}}}}.
tick{actorID: "server", id: "28", initiator: messageReceived{messageID: "27"}, resp: continue{messages: [{msg: MutationResponse{id: "2323860", payload: Reject{reason: "trace not equal", serverTrace: [Read{key: "foo", transactionID: "1806"},Read{key: "bar", transactionID: "422070"},Write{key: "foo", value: 5},Write{key: "bar", value: 15}]}}, to: "client0"}], state: ServerState{data: [{key: "bar", value: {transactionID: "422070", value: 10}},{key: "bar", value: {transactionID: "4529256", value: 15}},{key: "foo", value: {transactionID: "1806", value: 10}},{key: "foo", value: {transactionID: "4529256", value: 5}}], liveQueries: [], mutationDefns: {deposit: Lambda{args: ["toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, move: Lambda{args: ["fromAccount","toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "fromBalance"},{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, withdraw: Lambda{args: ["fromAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}}}}}}}.
tick{actorID: "client0", id: "30", initiator: messageReceived{messageID: "29"}, resp: continue{messages: [], state: ClientState{data: {bar: {transactionID: "2323860", value: 20}, foo: {transactionID: "2323860", value: 0}}, liveQueries: {}, mutationDefns: {deposit: Lambda{args: ["toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, move: Lambda{args: ["fromAccount","toAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "fromBalance"},{val: Read{default: 0, key: Var{name: "toAccount"}}, varName: "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, withdraw: Lambda{args: ["fromAccount","amount"], body: Let{bindings: [{val: Read{default: 0, key: Var{name: "fromAccount"}}, varName: "balanceBefore"}], body: Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}}}}, randSeed: 2323860, transactions: {1806: {invocation: {args: ["foo",10], name: "deposit"}, state: Committed{}}, 2323860: {invocation: {args: ["foo","bar",5], name: "move"}, state: Aborted{serverTrace: [Read{key: "foo", transactionID: "1806"},Read{key: "bar", transactionID: "422070"},Write{key: "foo", value: 5},Write{key: "bar", value: 15}]}}, 422070: {invocation: {args: ["bar",10], name: "deposit"}, state: Committed{}}, 4529256: {invocation: {args: ["foo","bar",5], name: "move"}, state: Committed{}}}}}}.
