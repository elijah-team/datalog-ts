# === highlight ===

hl.Segment{type: T, span: S, highlight: H} :-
  hl.ident{type: T, span: S, highlight: H} |
  hl.keyword{type: T, span: S, highlight: H} |
  hl.gotoLabelHighlighted{type: T, span: S, highlight: H} |
  hl.labelDefnHighlighted{type: T, span: S, highlight: H}.

hl.ident{type: "ident", span: S, highlight: false} :-
  ast.ident{span: S}.

hl.keyword{type: "keyword", span: S, highlight: false} :-
  ast.gotoKW{span: S}.

hl.labelDefnHighlighted{
  type: "ident",
  span: span{from: FIdx, to: TIdx},
  highlight: true
} :-
  ide.Cursor{idx: CIdx} &
  ast.label{parentID: BlockID, span: span{from: FIdx, to: TIdx}} &
  ast.block{id: BlockID} &
  FIdx <= CIdx & CIdx <= TIdx.

hl.gotoLabelHighlighted{
  type: "ident",
  name: N,
  span: span{from: FIdx, to: TIdx},
  highlight: true
} :-
  ide.Cursor{idx: CIdx} &
  ast.label{text: N, span: span{from: FIdx, to: TIdx}, parentID: GotoID} &
  ast.gotoInstr{id: GotoID} &
  FIdx <= CIdx & CIdx <= TIdx.

# === defn ===

defn.goto{blockID: BlockID, instrID: InstrID, to: ToName, labelSpan: S} :-
  ast.ident{text: ToName, parentID: LabelID} &
  ast.label{id: LabelID, parentID: GotoInstrID, span: S} &
  ast.gotoInstr{id: GotoInstrID, parentID: InstrID} &
  ast.instr{id: InstrID, parentID: BlockID}.

defn.block{id: BlockID, name: N, span: S} :-
  ast.block{id: BlockID} &
  ast.label{id: LabelID, parentID: BlockID} &
  ast.ident{parentID: LabelID, text: N, span: S}.

# === IDE ===

ide.Usage{definitionLoc: DL, usageLoc: UL, name: N} :-
  defn.block{span: DL, name: N} &
  defn.goto{labelSpan: UL, to: N}.

ide.jump{from: BF, to: BT} :-
  defn.goto{blockID: BlockID, to: BT} &
  defn.block{id: BlockID, name: BF}.

# === viz ===

internal.visualization{
  name: "Jumps",
  spec: graphviz{
    nodes: "defn.block{name: ID}",
    edges: "ide.jump{from: From, to: To}"
  }
}.
