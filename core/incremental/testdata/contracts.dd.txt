contract.balance{creditor: C, debtor: D, amount: A} :-
  sum[C, D, A: contract.owe{creditor: C, debtor: D, amount: A}].
----
application/datalog

contract.owe{creditor: C, debtor: D, amount: A} :-
  contract.node.Payment{id: N, from: D, to: C, amount: A} &
  !contract.PaymentRecord{from: D, to: C, amount: A}.
----
application/datalog

contract.balance{}?
----
application/datalog-results

.ruleGraph
----
application/graphviz
digraph G {
  "contract.balance" [fillcolor="lightblue" fontname="Courier" label="contract.balance: Subst(contract.balance{amount: A, creditor: C, debtor: D}) []" shape="box" style="filled"];
  "contract.owe" [fillcolor="lightblue" fontname="Courier" label="contract.owe: Subst(contract.owe{amount: A, creditor: C, debtor: D}) []" shape="box" style="filled"];
  "0" [fillcolor="darkseagreen2" fontname="Courier" label="0: Match(contract.owe{amount: A, creditor: C, debtor: D}) []" shape="box" style="filled"];
  "1" [fillcolor="" fontname="Courier" label="1: Agg(sum[C, D, A: contract.owe{amount: A, creditor: C, debtor: D}]) []" shape="box" style="filled"];
  "2" [fillcolor="darkseagreen2" fontname="Courier" label="2: Match(contract.node.Payment{amount: A, from: D, id: N, to: C}) [A-C-D]" shape="box" style="filled"];
  "3" [fillcolor="darkseagreen2" fontname="Courier" label="3: Match(contract.PaymentRecord{amount: A, from: D, to: C}) []" shape="box" style="filled"];
  "4" [fillcolor="" fontname="Courier" label="4: Negate() [A-C-D]" shape="box" style="filled"];
  "5" [fillcolor="thistle" fontname="Courier" label="5: Join(A, C, D) []" shape="box" style="filled"];
  "6" [fillcolor="moccasin" fontname="Courier" label="6: Union []" shape="box" style="filled"];
  "contract.owe" -> "0" [];
  "0" -> "1" [];
  "1" -> "contract.balance" [];
  "2" -> "5" [];
  "2" -> "6" [];
  "3" -> "4" [];
  "4" -> "5" [];
  "5" -> "6" [];
  "6" -> "contract.owe" [];
  "contract.node.Payment" -> "2" [];
  "contract.PaymentRecord" -> "3" [];
}

contract.node.Payment{amount: 100, from: "Alice", to: "Bob"}.
----
incremental-datalog/trace
contract.node.Payment: [contract.node.Payment{amount: 100, from: "Alice", to: "Bob"}+1]
2: [{A: 100, C: "Bob", D: "Alice"}+1]
5: []
6: [{A: 100, C: "Bob", D: "Alice"}+1]
contract.owe: [contract.owe{amount: 100, creditor: "Bob", debtor: "Alice"}+1]
0: [{A: 100, C: "Bob", D: "Alice"}+1]
1: [{A: 100, C: "Bob", D: "Alice"}+1]
contract.balance: [contract.balance{amount: 100, creditor: "Bob", debtor: "Alice"}+1]

contract.node.Payment{amount: 110, from: "Bob", to: "Alice"}.
----
incremental-datalog/trace
contract.node.Payment: [contract.node.Payment{amount: 110, from: "Bob", to: "Alice"}+1]
2: [{A: 110, C: "Alice", D: "Bob"}+1]
5: []
6: [{A: 110, C: "Alice", D: "Bob"}+1]
contract.owe: [contract.owe{amount: 110, creditor: "Alice", debtor: "Bob"}+1]
0: [{A: 110, C: "Alice", D: "Bob"}+1]
1: [{A: 110, C: "Alice", D: "Bob"}+1]
contract.balance: [contract.balance{amount: 110, creditor: "Alice", debtor: "Bob"}+1]

contract.PaymentRecord{amount: 100, contractID: 1, from: "Alice", time: 0, to: "Bob"}.
----
incremental-datalog/trace
contract.PaymentRecord: [contract.PaymentRecord{amount: 100, contractID: 1, from: "Alice", time: 0, to: "Bob"}+1]
3: [{A: 100, C: "Bob", D: "Alice"}+1]
4: [{A: 100, C: "Bob", D: "Alice"}-1]
5: [{A: 100, C: "Bob", D: "Alice"}-1]
6: [{A: 100, C: "Bob", D: "Alice"}-1]
contract.owe: [contract.owe{amount: 100, creditor: "Bob", debtor: "Alice"}-1]
0: [{A: 100, C: "Bob", D: "Alice"}-1]
1: [{A: 100, C: "Bob", D: "Alice"}-1, {A: 200, C: "Bob", D: "Alice"}+1]
contract.balance: [contract.balance{amount: 100, creditor: "Bob", debtor: "Alice"}-1]
contract.balance: [contract.balance{amount: 200, creditor: "Bob", debtor: "Alice"}+1]

contract.PaymentRecord{amount: 110, contractID: 1, from: "Bob", time: 30, to: "Alice"}.
----
incremental-datalog/trace
contract.PaymentRecord: [contract.PaymentRecord{amount: 110, contractID: 1, from: "Bob", time: 30, to: "Alice"}+1]
3: [{A: 110, C: "Alice", D: "Bob"}+1]
4: [{A: 110, C: "Alice", D: "Bob"}-1]
5: [{A: 110, C: "Alice", D: "Bob"}-1]
6: [{A: 110, C: "Alice", D: "Bob"}-1]
contract.owe: [contract.owe{amount: 110, creditor: "Alice", debtor: "Bob"}-1]
0: [{A: 110, C: "Alice", D: "Bob"}-1]
1: [{A: 110, C: "Alice", D: "Bob"}-1, {A: 220, C: "Alice", D: "Bob"}+1]
contract.balance: [contract.balance{amount: 110, creditor: "Alice", debtor: "Bob"}-1]
contract.balance: [contract.balance{amount: 220, creditor: "Alice", debtor: "Bob"}+1]

contract.balance{}?
----
application/datalog-results
contract.balance{amount: 200, creditor: "Bob", debtor: "Alice"}; {}.
contract.balance{amount: 220, creditor: "Alice", debtor: "Bob"}; {}.
