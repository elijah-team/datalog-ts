.table mother
.table father
matGramp{child: A, grandfather: C} :-
  mother{child: A, mother: B} & father{child: B, father: C}.
----
application/graphviz
digraph G {
  "mother" [fillcolor="darksalmon" fontname="Courier" label="mother:  []" shape="box" style="filled"];
  "father" [fillcolor="darksalmon" fontname="Courier" label="father:  []" shape="box" style="filled"];
  "0" [fillcolor="darkseagreen2" fontname="Courier" label="0: Match{A: child, B: mother} [B]" shape="box" style="filled"];
  "1" [fillcolor="darkseagreen2" fontname="Courier" label="1: Match{B: child, C: father} [B]" shape="box" style="filled"];
  "2" [fillcolor="thistle" fontname="Courier" label="2: Join(B) []" shape="box" style="filled"];
  "matGramp" [fillcolor="lightblue" fontname="Courier" label="matGramp: Subst(matGramp{child: A, grandfather: C}) []" shape="box" style="filled"];
  "mother" -> "0" [];
  "father" -> "1" [];
  "1" -> "2" [];
  "0" -> "2" [];
  "2" -> "matGramp" [];
}

.table a
.table b
.table c
d{} :- a{} & b{} & c{}.
----
application/graphviz
digraph G {
  "a" [fillcolor="darksalmon" fontname="Courier" label="a:  []" shape="box" style="filled"];
  "b" [fillcolor="darksalmon" fontname="Courier" label="b:  []" shape="box" style="filled"];
  "c" [fillcolor="darksalmon" fontname="Courier" label="c:  []" shape="box" style="filled"];
  "d" [fillcolor="lightblue" fontname="Courier" label="d: Subst(d{}) []" shape="box" style="filled"];
  "0" [fillcolor="darkseagreen2" fontname="Courier" label="0: Match{} []" shape="box" style="filled"];
  "1" [fillcolor="darkseagreen2" fontname="Courier" label="1: Match{} []" shape="box" style="filled"];
  "2" [fillcolor="thistle" fontname="Courier" label="2: Join() []" shape="box" style="filled"];
  "3" [fillcolor="darkseagreen2" fontname="Courier" label="3: Match{} []" shape="box" style="filled"];
  "4" [fillcolor="thistle" fontname="Courier" label="4: Join() []" shape="box" style="filled"];
  "a" -> "0" [];
  "b" -> "1" [];
  "1" -> "2" [];
  "0" -> "2" [];
  "c" -> "3" [];
  "3" -> "4" [];
  "2" -> "4" [];
  "4" -> "d" [];
}

.table mother
.table father
parent{child: C, parent: P} :-
  mother{child: C, mother: P} | father{child: C, father: P}.
----
application/graphviz
digraph G {
  "mother" [fillcolor="darksalmon" fontname="Courier" label="mother:  []" shape="box" style="filled"];
  "father" [fillcolor="darksalmon" fontname="Courier" label="father:  []" shape="box" style="filled"];
  "0" [fillcolor="moccasin" fontname="Courier" label="0: Union []" shape="box" style="filled"];
  "1" [fillcolor="darkseagreen2" fontname="Courier" label="1: Match{C: child, P: mother} []" shape="box" style="filled"];
  "2" [fillcolor="darkseagreen2" fontname="Courier" label="2: Match{C: child, P: father} []" shape="box" style="filled"];
  "parent" [fillcolor="lightblue" fontname="Courier" label="parent: Subst(parent{child: C, parent: P}) []" shape="box" style="filled"];
  "mother" -> "1" [];
  "1" -> "0" [];
  "father" -> "2" [];
  "2" -> "0" [];
  "0" -> "parent" [];
}

.table mother
.table father
parent{child: C, parent: P} :-
  mother{child: C, mother: P} | father{child: C, father: P}.
grandparent{grandchild: A, grandparent: C} :-
  parent{child: A, parent: B} &
  parent{child: B, parent: C}.
----
application/graphviz
digraph G {
  "mother" [fillcolor="darksalmon" fontname="Courier" label="mother:  []" shape="box" style="filled"];
  "parent" [fillcolor="lightblue" fontname="Courier" label="parent: Subst(parent{child: C, parent: P}) []" shape="box" style="filled"];
  "0" [fillcolor="moccasin" fontname="Courier" label="0: Union []" shape="box" style="filled"];
  "1" [fillcolor="darkseagreen2" fontname="Courier" label="1: Match{C: child, P: mother} []" shape="box" style="filled"];
  "2" [fillcolor="darkseagreen2" fontname="Courier" label="2: Match{C: child, P: father} []" shape="box" style="filled"];
  "3" [fillcolor="darkseagreen2" fontname="Courier" label="3: Match{A: child, B: parent} [B]" shape="box" style="filled"];
  "4" [fillcolor="darkseagreen2" fontname="Courier" label="4: Match{B: child, C: parent} [B]" shape="box" style="filled"];
  "5" [fillcolor="thistle" fontname="Courier" label="5: Join(B) []" shape="box" style="filled"];
  "grandparent" [fillcolor="lightblue" fontname="Courier" label="grandparent: Subst(grandparent{grandchild: A, grandparent: C}) []" shape="box" style="filled"];
  "father" [fillcolor="darksalmon" fontname="Courier" label="father:  []" shape="box" style="filled"];
  "mother" -> "1" [];
  "parent" -> "3" [];
  "parent" -> "4" [];
  "0" -> "parent" [];
  "1" -> "0" [];
  "2" -> "0" [];
  "3" -> "5" [];
  "4" -> "5" [];
  "5" -> "grandparent" [];
  "father" -> "2" [];
}

.table var
.table defn
undefVar{name: N} :-
  var{name: N} &
  !defn{name: N}.
----
application/graphviz
digraph G {
  "var" [fillcolor="darksalmon" fontname="Courier" label="var:  []" shape="box" style="filled"];
  "defn" [fillcolor="darksalmon" fontname="Courier" label="defn:  []" shape="box" style="filled"];
  "0" [fillcolor="darkseagreen2" fontname="Courier" label="0: Match{N: name} []" shape="box" style="filled"];
  "1" [fillcolor="darkseagreen2" fontname="Courier" label="1: Match{N: name} []" shape="box" style="filled"];
  "2" [fillcolor="" fontname="Courier" label="2: Negation(N) []" shape="box" style="filled"];
  "undefVar" [fillcolor="lightblue" fontname="Courier" label="undefVar: Subst(undefVar{name: N}) []" shape="box" style="filled"];
  "var" -> "0" [];
  "defn" -> "1" [];
  "1" -> "2" [];
  "0" -> "2" [];
  "2" -> "undefVar" [];
}

.table foo
count{num: I} :-
  count[I: foo{id: I}].
----
application/graphviz
digraph G {
  "foo" [fillcolor="darksalmon" fontname="Courier" label="foo:  []" shape="box" style="filled"];
  "0" [fillcolor="darkseagreen2" fontname="Courier" label="0: Match{I: id} []" shape="box" style="filled"];
  "1" [fillcolor="" fontname="Courier" label="1: Agg(count[I: foo{id: I}]) []" shape="box" style="filled"];
  "count" [fillcolor="lightblue" fontname="Courier" label="count: Subst(count{num: I}) []" shape="box" style="filled"];
  "foo" -> "0" [];
  "0" -> "1" [];
  "1" -> "count" [];
}

.table edge
reachable{a: A, c: C} :-
  edge{from: A, to: C} |
  edge{from: A, to: B} &
  reachable{from: B, to: C}.
----
application/graphviz
digraph G {
  "edge" [fillcolor="darksalmon" fontname="Courier" label="edge:  []" shape="box" style="filled"];
  "0" [fillcolor="moccasin" fontname="Courier" label="0: Union []" shape="box" style="filled"];
  "1" [fillcolor="darkseagreen2" fontname="Courier" label="1: Match{A: from, C: to} []" shape="box" style="filled"];
  "2" [fillcolor="darkseagreen2" fontname="Courier" label="2: Match{A: from, B: to} [B]" shape="box" style="filled"];
  "3" [fillcolor="darkseagreen2" fontname="Courier" label="3: Match{B: from, C: to} [B]" shape="box" style="filled"];
  "4" [fillcolor="thistle" fontname="Courier" label="4: Join(B) []" shape="box" style="filled"];
  "reachable" [fillcolor="lightblue" fontname="Courier" label="reachable: Subst(reachable{a: A, c: C}) []" shape="box" style="filled"];
  "edge" -> "1" [];
  "edge" -> "2" [];
  "1" -> "0" [];
  "reachable" -> "3" [];
  "3" -> "4" [];
  "2" -> "4" [];
  "4" -> "0" [];
  "0" -> "reachable" [];
}
