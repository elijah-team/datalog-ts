hl.Segment{type: T, id: I, span: S, highlight: H} :-
  hl.segmentInt{type: T, id: I, span: S, highlight: H} |
  hl.segmentString{type: T, id: I, span: S, highlight: H} |
  hl.segmentBool{type: T, id: I, span: S, highlight: H} |
  hl.keyword{type: T, id: I, span: S, highlight: H} |
  hl.segmentIdent{type: T, id: I, span: S, highlight: H} |
  hl.segmentSpecialVar{type: T, id: I, span: S, highlight: H} |
  hl.segmentIdentDefnHL{type: T, id: I, span: S, highlight: H} |
  hl.segmentIdentUsageHL{type: T, id: I, span: S, highlight: H} |
  hl.segmentComment{type: T, id: I, span: S, highlight: H}.

# primitives
hl.segmentInt{type: "int", id: I, span: S, highlight: false} :-
  hl.mapping{rule: R, type: "int"} &
  astInternal.node{rule: R, id: I, span: S}.
hl.segmentString{type: "string", id: I, span: S, highlight: false} :-
  hl.mapping{rule: R, type: "string"} &
  astInternal.node{rule: R, id: I, span: S}.
hl.keyword{type: "keyword", id: I, span: S, highlight: false} :-
  hl.mapping{rule: R, type: "keyword"} &
  astInternal.node{rule: R, id: I, span: S}.
hl.segmentBool{type: "bool", id: I, span: S, highlight: false} :-
  hl.mapping{rule: R, type: "bool"} &
  astInternal.node{rule: R, id: I, span: S}.
hl.segmentComment{type: "comment", id: I, span: S, highlight: false} :-
  hl.mapping{rule: R, type: "comment"} &
  astInternal.node{rule: R, id: I, span: S}.

# identifiers
hl.segmentSpecialVar{type: "specialVar", span: S, highlight: false} :-
  hl.mapping{rule: R, type: "specialVar"} &
  astInternal.node{rule: R, span: S}.

hl.segmentIdent{type: "var", id: I, span: S, highlight: false} :-
  hl.mapping{rule: R, type: "ident"} &
  astInternal.node{rule: R, parentID: I, span: S}.
hl.segmentIdentDefnHL{type: "defn", span: S, highlight: true} :-
  ide.CurrentUsage{defnLoc: S} &
  scope.Defn{span: S}.
# TODO: highlight other usages
hl.segmentIdentUsageHL{type: "usage", span: S, highlight: true} :-
  ide.CurrentUsage{usageLoc: S} &
  scope.Var{span: S}.

# just for testing
hl.usageAndDefn{type: T, span: S, highlight: H} :-
  hl.segmentIdentDefnHL{type: T, span: S, highlight: H} |
  hl.segmentIdentUsageHL{type: T, span: S, highlight: H}.
